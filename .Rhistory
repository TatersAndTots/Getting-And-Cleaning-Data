t.test(half, one, alternative = "less")
half
one
t.test(half$len, one$len, alternative = "less")
t.test(one$len, two$len, alternative = "less")
t.test(half$len, two$len, alternative = "less")
rm(list=ls())
library(UsingR)
data(diamond)
install.packages(UsingR)
install.packages(UsingR)
installed.packages()
names(installed.packages())
head(installed.packages())
installed.packages()[1]
installed.packages()$Package
pack <- head(installed.packages())
pack <- installed.packages()
head(pack)
names(pack)
labels(pack)
grepl(labels(pack)[[1]], "UsingR")
grep(labels(pack)[[1]], "UsingR")
install.packages("usingr")
install.packages("UsingR")
library(UsingR)
updateR()
updateR()
library(installr)
updateR()
library(UsingR)
library(knitr)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
x = 1,2,3
x = c(1,2,3)
x
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geaom_smooth(mehtod = "lm", colour = "black")
g
g = g + geom_smooth(mehtod = "lm", colour = "black")
g
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit = lm(price~carat, data = diamond)
fit
fit = lm(price~carat, data <- diamond)
fit
data
coef(fit)
summary(fit)
fit2 <- lm(price ! I(carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
soef(fit3)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
predict(fit, newdata = data.frame(carat = newx))
rm(list=ls())
diamond
data
?data
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(x~y)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e-(y-yhat)))
max(abs(e-(y-coef(fit)[1]- coef(fit[2] * x)))
)
max(abs(e-(y-coef(fit)[1]- coef(fit)[2] * x)))
sum(e)
sum(e * x)
e
fit <- lm(y~x)
e <- resid(fit)
> yhat <- predict(fit)
> max(abs(e-(y-yhat)))
yhat <- predict(fit)
max(abs(e-(y-yhat)))
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
swirl()
library(swirl)
swirl()
lm(child~parent, galton)
fit <- lm(child~parent, galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
sqrt(cor(child ~ parent))
sqrt(cor(child ~ parent, galton))
sqrt(cor(galton$child ~ galton$parent))
cor(galton$child ~ galton$parent)^2
?cor
cor(galton$child,galton$parent)^2
ones <- rep(1, 928)
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(volume ~ Girth + Height + Constant - 1, trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees <- eliminate("Girth", trees)
trees <- eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
trees
exit
exit()
end()
library(swirl)
swir()
swirl()
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lappy(list(fit, fit2), coef)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit(Fertility, . + ec, swiss)
efit <- lm(Fertility, . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
summary(fit)$coefficients
summary(fit)$coefficients[1,1]
summary(fit)$coefficients[1,1] + c(1,-1) * qt(.975, df = fit$df) * summary(fit)$coefficients[1,2]
summary(fit)$coefficients[2,1] + c(1,-1) * qt(.975, df = fit$df) * summary(fit)$coefficients[2,2]
?pt
head(mtcars)
lm(mpg~wt, mtcars)
lm(mpg~wt, mtcars)$coefficients
cars <- lm(mpg~wt, mtcars)
summary(cars)
cars2 <- lm(mpg~wt-1, mtcars)
summary(cars2)
?mtcars
?predict
predict(cars, mean(mtcars$wt))
predict(cars, 5.2916)
37.2851 - 5.3445*5.2916
plot(mtcars$wt, mtcars$mpg)
mean(mtcars$wt)
37.2851 - mean(mtcars$wt) * 5.2445
37.2851 - (mean(mtcars$wt) -1) * 5.2445
cars2 <- lm(mpg ~ I(wt - mean(mtcars$wt)), mtcars)
summary(cars2)
3721/500
500/3721
new <- 3
predict(cars, newdata = data.frame(wt = new))
37.2851 +  -5.3445 * 3
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
summary(lm(y~x-1))
predict(cars, newdata = data.frame(wt = new))
new <- c(mean(mtcars$wt, 3))
predict(cars, newdata = data.frame(wt = new))
predict(cars, newdata = data.frame(new))
predict(cars, newdata = data.frame(wt = new))
new <- c(mean(mtcars$wt), 3)
predict(cars, newdata = data.frame(wt = new))
predict(cars, newdata = data.frame(wt = new), interval = "confidence")
predict(cars, newdata = data.frame(wt = new), interval = "prediction")
cars2 <- lm(mpg~I(wt/2), mtcars)
summary(cars2)
-10.689+1.118
-10.689+2*1.118
summary(cars2)[2,1]
summary(cars2)[1,1]
summary(cars2)$coefficients[1,1]
summary(cars2)$coefficients[1,2]
summary(cars2)$coefficients[2,1
]
summary(cars2)$coefficients[2,1]
summary(cars2)$coefficients[2,1] + c(-1,1) * qt(.975, df = cars2$df) * ummary(cars2)$coefficients[2,2]
summary(cars2)$coefficients[2,1] + c(-1,1) * qt(.975, df = cars2$df) * summary(cars2)$coefficients[2,2]
cars$df
summary(cars)
summary(cars2)
(summary(cars)$coefficients[2,1] + c(-1,1) * qt(.975, df = cars2$df) * summary(cars)$coefficients[2,2]) *2
cars3 <- lm(mpg ~ wt -1, mtcars)
summary(cars)
summary(cars2)
summary(cars)
summary(cars3)
sum(cars$residuals^2)/sum(cars3$residuals^2)
1/sum(cars$residuals^2)/sum(cars3$residuals^2)
1/(sum(cars$residuals^2)/sum(cars3$residuals^2))
summary(cars)
ex <- lm(y~x)
summary(ex)
confint(cars)
predict(cars, newdata = data.frame(wt = 3), interval = "prediction")
predict(cars, newdata = data.frame(wt = mean(mtcars$wt)), interval = "prediction")
predict(cars, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
summary(cars3)
summary(cars2)
predict(car3, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(car2, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(cars2, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
confint(cars2)
summary(cars3)
cars4 <- lm(mpg~1, mtcars)
summary(cars5)
summary(cars4)
sum(cars$residuals^2)/sum(cars4$residuals^2)
rm(list=ls())
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
library(knitr)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)") + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
rm(list=ls())
?require
require(datasets)
data(swiss); ?swiss
head(swiss)
require(GGally); require(ggplot2)
install.packages("GGally")
require(GGally)
g <- ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
g <- ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
x <- c(1,1,1,2,2,2,3,3,3)
x == 1
x2 <- x==1
x[x1]
x[x2]
x <- 1:10
x+x
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(class, InsectSprays)
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA$count)
mean(sA)
mean(sB)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spreay2 <- relevel(InsectSprays, "C")
spreay2 <- relevel(InsectSprays$spray, "C")
spreay2 <- relevel(InsectSprays$spray, \"C\")
spreay2 <- relevel(InsectSprays$spray, C)
spreay2 <- relevel(InsectSprays$spray, "C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count~spray, InsectSprays)
fit2 <- lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3] - fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmf <- lim(Numeric ~ Year, x[hunger$Sex == "Female"])
lmf <- lm(Numeric ~ Year, x[hunger$Sex == "Female"])
lmf <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female"])
help
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex == "Male"] ~ Year[Sex == "Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
summary(mtcars)
fit <- lm(mpg ~ cyl + wt + cyl*wt, mtcars)
summary(fit)$coef
factors(mtcars$cyl)
factor(mtcars$cyl)
fit <- lm(mpg ~ cyl, mtcars)
summary(fit)$coef
fit <- lm(mpg ~ cyl[cyl == 4] + cyl[cyl == 6] + cyl[cyl==8], mtcars)
cyl[cyl==4]
mtcars$cyl[cyl==4]
head(mtcars4cyl)
head(mtcars$cyl)
mtcars$cyl[mtcars$cyl==4]
fit <- lm(mpg ~ cyl[mtcars$cyl == 4] + cyl[mtcars$cyl == 6] + cyl[mtcars$cyl==8], mtcars)
library(swirl)
swirl()
rgp1()
rgp2()
View(swiss)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)- deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
rm(list=ls())
library(MASS)
?shuttle
?glm
fit <- glm(use ~ wing, shuttle, family = "binomial")
fit <- glm(use ~ wind, shuttle, family = "binomial")
summary(fit)
exp(fit$coefficients)
exp(confint(fit$coefficients))
exp(confint(fit))
head(shuttle)
class(shuttle$wind)
fit2 <- glm(use ~ wind, magn, shuttle, family = "binomial")
fit2 <- glm(use ~ wind + magn, shuttle, family = "binomial")
exp(fit2$coefficients)
head(InsectSprays)
fit3 <- glm(count ~ spray, InsectSprays, family = "poisson")
summary(fit3)
exp(fit3$coefficients)
14.5/(14.5+1.05747)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
knots
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
xMat <- cbind(x, splineTerms)
head(xMat)
xMat <- cbind(1, x, splineTerms)
head(xMat)
yhat <- predict(lm(y ~ xMat))
dim(xMat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue")
lines(x, yhat, col = "red", lwd = 2)
knot <- function(knot = 0) {(x * 0) - (x - 0)}
knot()
x
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- function(knot = 0) {(x * 0) - (x - 0)}
knot()
knot <- function(data) {(data * 0) - (data - 0)}
knot(x)
spline <- knot(x)
knot <- function(data) {(data > 0) * (data - 0)}
knot(x)
spline <- knot(x)
xmat <- cbind(x,spline)
xmat
yhat <- predict(lm(y~xmat))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue")
lines(x, yhat, col = "red", lwd = 2)
x
yhat
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
summary(fit)
coef(fit)
library(swirl)
swirl()
swirl()
?mtcars
fit <- lm(mpg ~ am, mtcars)
plot(fit$residuals, mtcars$mpg)
plot(mpg, am, mtcars)
plot(mtcars$mpg, mtcars$am)
class(mtcars$am)
c(mean(mtcars$mpg[mtcars$am == 0]), mean(mtcars$mpg[mtcars$am == 1]))
plot(fit$residuals, mtcars$mpg)
fit2 <- lm(mpg ~ ., mtcars)
step(fit)
step(fit2)
fit3 <- lm(formula = mpg ~ wt + qsec + am, data = mtcars)
summary(fit3)
?mtcars
plot(fit3$residuals, mtcars$mpg)
par(1,2)
par(mfrow = c(1,2))
plot(fit$residuals, mtcars$mpg)
plot(fit3$residuals, mtcars$mpg)
plot(fit$residuals, mtcars$mpg)
plot(fit$residuals, mtcars$mpg)
plot(fit3$residuals, mtcars$mpg)
?lines
par(mfrow = c(1,2))
plot(fit$residuals, mtcars$mpg)
plot(fit3$residuals, mtcars$mpg)
abline(lm(mtcars$mpg ~ fit3$residuals))
summary(lm(mtcars$mpg ~ fit3$residuals))
summary(lm(mtcars$mpg ~ fit1$residuals))
summary(lm(mtcars$mpg ~ fit$residuals))
?ddply
library(dplyr)
?ddply
?ddply
library(plyr)
library(plyr)
?ddply
setwd("~/R_Coding/Mod3/Final Project")
rm(list=ls())
library(reshape2)
library(plyr)
library(dplyr)
subtest <- read.table("~/R_Coding/Mod3/UCI HAR Dataset/test/subject_test.txt", header = FALSE)
subtest <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/test/subject_test.txt", header = FALSE)
xtest <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/test/X_test.txt", header = FALSE)
ytest <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/test/y_test.txt", header = FALSE)
subtrain <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/train/subject_train.txt", header = FALSE)
xtrain <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/train/X_train.txt", header = FALSE)
ytrain <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/train/y_train.txt", header = FALSE)
feat <- read.table("~/R_Coding/Mod3/Final Project/UCI HAR Dataset/features.txt", header = FALSE)
#determine what columns are worth keeping. We need means and std's. Lets subset by anything with "mean" or "std" in it
featmstd <- subset(feat, grepl("mean", feat$V2) | grepl("std", feat$V2))
names <-as.character(featmstd[,2])
names <- gsub("\\(\\)", "", names)
names <- gsub("mean", "Mean", names)
names <- gsub("std", "Std", names)
drop <- featmstd$V1
#And now to actually subset by those columns
xtest2 <- xtest[drop]
xtrain2 <- xtrain[drop]
#Combining our data with a new factor variable to tell which set each row came from
test <- cbind(rep("Test", length(ytest$V1)),subtest, ytest, xtest2)
train <- cbind(rep("Train", length(ytrain$V1)), subtrain, ytrain, xtrain2)
names(test) <- c("Set", "Subject", "Activity", names)
names(train) <- c("Set", "Subject", "Activity", names)
#We combine the two sets into one data frame and clean up the Activity column
data <- rbind(test, train)
data[,3] <- as.factor(data[,3])
act <- function(x) {
if(x == 1) {x <- "Walking"}
else if(x == 2) {x <- "Walking Upstairs"}
else if(x == 3) {x <- "Walking Downstairs"}
else if(x == 4) {x <- "Sitting"}
else if(x == 5) {x <- "Standing"}
else if(x == 6) {x <- "Laying"}
}
data[,3] <- sapply(data[,3], act)
#Finally, we build a tidy dataset and write it to a file
data_tidy <- ddply(data, c("Subject","Activity"), numcolwise(mean))
write.table(data_tidy, "tidy dataset.txt")
head(data_tidy[,1:5])
